mapped = as.numeric(strsplit(sub("^\\s+", "", temp[3,]), split=" ")[[1]][1])
}
mapped_reads = as.numeric(mapply(get_mapped, files))
temp = mapped_reads
mapped_reads[9] = temp[10]
mapped_reads[10] = temp[9]
mapped_reads = data.frame(sub_sample = seq(0.1,1,0.1), distinct_reads = mapped_reads)
mapped_reads
temp = draw_mapped_dedup_reads_single_cell("He-lu-6_S6_L006_R1_001.umi_encoded_adaptor_removed_no_mismatch","../processed_files/160402/")
p = ggplot(temp)+geom_line(aes(x=sub_sample, y = distinct_reads))
p
p = ggplot(temp)+geom_line(aes(x=sub_sample, y = distinct_reads))+theme(axis.text.x = element_text(size =10, color = "black",hjust = 1, vjust = 1), axis.text.y = element_text(size =10, color = "black"))
p
13.8/188
13.8/18
12425/60/24
18*15/24
epigenomic_marks = c("../other_annotation/epigenomic_annotation/Noonan_brain_roadmap_union.bed","../other_annotation/epigenomic_annotation/Epigenome_E081_E082_intersection.bed","../other_annotation/epigenomic_annotation/encode_DHS_union.bed")
epigenomic_marks == "no"
a = 1
if(epigenomic_marks == "no"){}
if(epigenomic_marks == "no"){
a=0}
a
rm(list=ls())
new_control = new.env()
load("../data/debug_region_list_073116_using_258_control_data_matrix.Rdata", new_control)
setwd("/media/yuwen/F/ASD/analysis/")
new_control = new.env()
load("../data/debug_region_list_073116_using_258_control_data_matrix.Rdata", new_control)
write.table(new_control$data_matrix[new_control$data_matrix$Prediction == "dnv_proband" & new_control$data_matrix$Type == "SNV",c(1,2,3,7)], "temp.bed", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
write.table(new_control$data_matrix[new_control$data_matrix$Prediction == "dnv_proband" ,c(1:5,8,7)], "annovar_input_temp.bed", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
mut_file = "./temp.bed"
window_file = "../other_annotation/epigenomic_annotation/Whole_genome.promoter_yanyu_10kb_exons_no_utr_no_na_genes.50bp_window.bed"
cg_file = "../other_annotation/epigenomic_annotation/Whole_genome.promoter_yanyu_10kb_exons_no_utr_no_na_genes.50bp_window.bed.fasta.cg"
mutrate_file = "../other_annotation/epigenomic_annotation/Whole_genome.promoter_yanyu_10kb_exons_no_utr_no_na_genes.50bp_window.bed.mutrate"
gene_assign_file = "../other_annotation/epigenomic_annotation/Whole_genome.promoter_yanyu_10kb_exons_no_utr_no_na_genes.50bp_window.bed_genename.bed"
overlap = 1e-9
gene_prior_file = "../other_annotation/gene_list/TADA_SNV_CNV_combined_Feb7_tadaname_null_PPA_p0_0.94.txt"
epigenomic_marks = c("../other_annotation/epigenomic_annotation/Noonan_brain_roadmap_union.bed","../other_annotation/epigenomic_annotation/Epigenome_E081_E082_intersection.bed","../other_annotation/epigenomic_annotation/encode_DHS_union.bed")
rm_nonsyn = TRUE
annovar_input = "annovar_input_temp.bed"
annovar_folder = "/media/yuwen/Elements/ANNOVAR/annovar/"
sample_size = 314
effect_size = c(5,3,2)
set.seed(100)
prefix=system("date +%s", intern = TRUE) # prefix for temporary files that will be deleted at the end of the pipeline
mut = read.delim(mut_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
if(rm_nonsyn){
# command to transform the start base to 0-based in order to use bedtools to do overlap
command = paste("awk {'print $1\"\t\"$2-1\"\t\"$3\"\t\"$4\"\t\"$5\"\t\"$6\"\t\"$7'} ", annovar_input, " > ", paste(prefix, "_annovar_for_bedtools.bed",sep = ""),sep = "")
system(command)
command = paste("grep coding ", window_file, " > ", paste(prefix, "_coding_window_temp.bed", sep = ""), sep = "")
system(command)
command = paste("bedtools intersect -a ",paste(prefix, "_annovar_for_bedtools.bed",sep = ""), " -b ", paste(prefix, "_coding_window_temp.bed", sep = ""), " -wa | sort | uniq | awk {'print $1\"\t\"$2+1\"\t\"$3\"\t\"$4\"\t\"$5\"\t\"$6\"\t\"$7'} > ",paste(prefix, "_for_annovar_temp_in_coding.txt",sep = ""), sep = "")
system(command)
command = paste("perl ", annovar_folder, "annotate_variation.pl -geneanno -buildver hg19 ", paste(prefix, "_for_annovar_temp_in_coding.txt",sep = ""), " ", annovar_folder, "humandb/", sep = "")
system(command)
coding_anno = read.delim(paste(paste(prefix, "_for_annovar_temp_in_coding.txt",sep = ""),".exonic_variant_function", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
removed_id = coding_anno[coding_anno[,2] != "synonymous SNV",10]
# now remove non-synonymous mutations (every coding mutations that are not synonymous mutations)
mut = mut[!is.element(mut[,4], removed_id),]
}
mut[,2] = mut[,2] - 1  # change 1-based start to 0-based start.
write.table(mut, paste(prefix,"_temp.bed", sep = ""), col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
command = paste("bedtools coverage -a ", paste(prefix,"_temp.bed", sep = ""), " -b ", window_file, " > ", paste(prefix,"_temp_coverage.bed", sep = ""), sep = "")
system(command)
coverage = read.delim(paste(prefix,"_temp_coverage.bed", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
coverage = coverage[,1:5]
head(coverage)
colnames(coverage) = c("chr","start","end","site_index","mut_count")
coverage$window_size = coverage$end - coverage$start # some regions don't have full length of, say, 50bp
window = read.delim(window_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
cg = read.delim(cg_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
coverage = merge(coverage, cg, by.x = "site_index", by.y ="site_index")
colnames(cg) = c("site_index", "cg")
coverage$coding = as.numeric(mapply(function(x,y) grepl(y,x),coverage$site_index, MoreArgs = list(y="coding")))
coverage$promoter = as.numeric(mapply(function(x,y) grepl(y,x),coverage$site_index, MoreArgs = list(y="promoter")))
mutrate = read.delim(mutrate_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
coverage = merge(coverage, mutrate, by.x = "site_index", by.y = "site_index")
coverage$nf = as.numeric(mapply(function(x,y) grepl(y,x),coverage$site_index, MoreArgs = list(y="nf")))
mutrate = data.frame(site_index = mutrate[,1], mutrate = mutrate[,4])
coverage = coverage[coverage$mutrate !=0,]
head(cg)
coverage = read.delim(paste(prefix,"_temp_coverage.bed", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
coverage = coverage[,1:5]
colnames(coverage) = c("chr","start","end","site_index","mut_count")
coverage$window_size = coverage$end - coverage$start # some regions don't have full length of, say, 50bp
window = read.delim(window_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
cg = read.delim(cg_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
colnames(cg) = c("site_index", "cg")
coverage = merge(coverage, cg, by.x = "site_index", by.y ="site_index")
coverage$coding = as.numeric(mapply(function(x,y) grepl(y,x),coverage$site_index, MoreArgs = list(y="coding")))
coverage$promoter = as.numeric(mapply(function(x,y) grepl(y,x),coverage$site_index, MoreArgs = list(y="promoter")))
coverage$nf = as.numeric(mapply(function(x,y) grepl(y,x),coverage$site_index, MoreArgs = list(y="nf")))
mutrate = read.delim(mutrate_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
mutrate = data.frame(site_index = mutrate[,1], mutrate = mutrate[,4])
coverage = merge(coverage, mutrate, by.x = "site_index", by.y = "site_index")
coverage = coverage[coverage$mutrate !=0,]
head(coverage)
head(coverage)
epigenomic_marks
epigenomic_marks_list = epigenomic_marks
epigenomic_marks epigenomic_marks_list[1]
epigenomic_marks = epigenomic_marks_list[1]
command = paste("bedtools intersect -f ", overlap, " -a ", window_file , " -b ", epigenomic_marks, " -wa > ", paste(prefix,"_temp_overlap_epi.bed", sep = ""),sep = "")
system(command)
window_in_epi = read.delim(paste(prefix,"_temp_overlap_epi.bed", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
dim(coverage)
window_in_epi = data.frame(site_index = window_in_epi[,4], epi = 1)
parse(text = "x")
window_in_epi = read.delim(paste(prefix,"_temp_overlap_epi.bed", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
epi_index = 1; # start from the first epi marker
window_in_epi = data.frame(site_index = window_in_epi[,4], parse(text = paste("epi", epi_index, sep = "")) = 1)
head(window_in_epi)
epi_index = 1; # start from the first epi marker, will add 1 to itself after incorporate each epigenomics mark.
parse(text = paste("epi", epi_index, sep = ""))
parse(text = paste("epi", epi_index, sep = "")) = 1
eval(parse(text = paste("epi", epi_index, sep = ""))) = 1
eval(parse(text = paste("epi", epi_index, sep = "")))
?assign
assign(parse(text = paste("epi", epi_index, sep = "")), 1)
?assign
assign(paste("epi", epi_index, sep = ""), 1)
epi1
window_in_epi = data.frame(site_index = window_in_epi[,4], assign(paste("epi", epi_index, sep = ""), 1))
head(window_in_epi)
window_in_epi = read.delim(paste(prefix,"_temp_overlap_epi.bed", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
window_in_epi = data.frame(site_index = window_in_epi[,4], paste("epi", epi_index, sep = "") = )
window_in_epi = data.frame(site_index = window_in_epi[,4], paste("epi", epi_index, sep = "") = 1)
paste("epi", epi_index, sep = "")
assign(paste("epi", epi_index, sep = ""),1)
window_in_epi = data.frame(site_index = window_in_epi[,4], assign(paste("epi", epi_index, sep = ""),1))
head(winwindow_in_epi)
head(window_in_epi)
window_in_epi = data.frame(site_index = window_in_epi[,4], paste("epi", epi_index, sep="") = 1))
window_in_epi = data.frame(site_index = window_in_epi[,4], parse(paste("epi", epi_index, sep="")) = 1))
parse(paste("epi", epi_index, sep="")) = 1
parse(paste("epi", epi_index, sep=""))
eval(parse(paste("epi", epi_index, sep="")))
eval(paste("epi", epi_index, sep=""))
?parse
window_in_epi = read.delim(paste(prefix,"_temp_overlap_epi.bed", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
window_in_epi = data.frame(site_index = window_in_epi[,4], as.symbol(paste("epi", epi_index, sep="")) = 1))
as.symbol(paste("epi", epi_index, sep=""))
as.symbol(paste("epi", epi_index, sep="")) = 1
?as.symbol
parse(paste("epi", epi_index, sep=""))
window_in_epi$parse(paste("epi", epi_index, sep="")) = 1
window_in_epi$eval(parse(text=paste("epi", epi_index, sep=""))) = 1
parse(text=paste("epi", epi_index, sep="")
)
eval(parse(text=paste("epi", epi_index, sep="")))
window_in_epi$parse(text=paste("epi", epi_index, sep="")) = 1
head(window_in_epi)
a = "V2"
head(window_in_epi[,a])
b = "df"
window_in_epi[,b] = 1
head(window_in_epi)
window_in_epi = read.delim(paste(prefix,"_temp_overlap_epi.bed", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
window_in_epi = data.frame(site_index = window_in_epi[,4])
window_in_epi[,paste("epi", epi_index, sep="")] = 1
head(window_in_epi)
coverage = merge(coverage, window_in_epi, by.x = "site_index", by.y = "site_index", all.x = TRUE)
head(coverage)
coverage[is.na(coverage[,paste("epi", epi_index, sep="")]),paste("epi", epi_index, sep="")] = 0
head(coverage)
epi_index = 1; # start from the first epi marker, will add 1 to itself after incorporate each epigenomics mark.
dim(coverage)
head(coverage)
coverage= coverage[,1:11]
epi_index = 1; # start from the first epi marker, will add 1 to itself after incorporate each epigenomics mark.
for(epigenomic_marks in epigenomic_marks_list){
command = paste("bedtools intersect -f ", overlap, " -a ", window_file , " -b ", epigenomic_marks, " -wa > ", paste(prefix,"_temp_overlap_epi.bed", sep = ""),sep = "")
system(command)
window_in_epi = read.delim(paste(prefix,"_temp_overlap_epi.bed", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
window_in_epi = data.frame(site_index = window_in_epi[,4])
window_in_epi[,paste("epi", epi_index, sep="")] = 1
coverage = merge(coverage, window_in_epi, by.x = "site_index", by.y = "site_index", all.x = TRUE)
coverage[is.na(coverage[,paste("epi", epi_index, sep="")]),paste("epi", epi_index, sep="")] = 0
epi_index = epi_index + 1
}
head(coverage)
sum(coverage$epi1)
sum(coverage$epi2)
sum(coverage$epi3)
gene_assign = read.delim(gene_assign_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
colnames(gene_assign) = c("site_index", "genename")
test = coverage[1:100,]
?glm
head(test)
out.offset <- glm(mut_count ~ coding+promoter+cg+epi+offset(log(2*mutrate*sample_size)), family = poisson, data = test)
head(coverage)
annotation_index = 1
for(seq_annotation in sequence_annotation_list){
annotation_raw = read.delim(seq_annotation, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
annotation = data.frame(site_index = annotation_raw[,1])
annotation[,paste("annotation",annotation_index,sep = "")] = annotation_raw[,4]
coverage = merge(coverage, annotation, by.x = "site_index", by.y = "site_index")
annotation_index = annotation_index + 1
}
sequence_annotation_list = c("../other_annotation/epigenomic_annotation/Whole_genome.promoter_yanyu_10kb_exons_no_utr_no_na_genes.50bp_window.bed.phastcons100way")
annotation_index = 1
for(seq_annotation in sequence_annotation_list){
annotation_raw = read.delim(seq_annotation, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
annotation = data.frame(site_index = annotation_raw[,1])
annotation[,paste("annotation",annotation_index,sep = "")] = annotation_raw[,4]
coverage = merge(coverage, annotation, by.x = "site_index", by.y = "site_index")
annotation_index = annotation_index + 1
}
gene_assign_file
num_addition_par = length(epigenomic_marks_list) + length(sequence_annotation_list) # number of additional feature parameters
f = paste("mut_count ~ coding + promoter + cg + ",paste(tail(colnames(coverage), num_addition_par), collapse = " + "), "+ offset(log(2*mutrate*sample_size))", sep = "")
f
out.offset <- do.call("glm", list(as.formula(f), data = coverage, family = poisson))
gene_assign = read.delim(gene_assign_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
colnames(gene_assign) = c("site_index", "genename")
coverage = data.frame(coverage, adjusted_mutrate = out.offset$fitted.values)
mutrate_temp = merge(coverage, gene_assign, by.x = "site_index", by.y = "site_index")
gene_prior = read.delim(gene_prior_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
gene_prior_file
gene_prior = read.delim(gene_prior_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
gene_risk_assign = mapply(function(x){rbinom(1,1,1-x)}, gene_prior[,2])
gene_prior = data.frame(gene_prior, risk_indicator = gene_risk_assign)
mutrate_temp_risk = mutrate_temp[is.element(mutrate_temp$genename, gene_prior[gene_prior$risk_indicator == 1,1]),]
mutrate_temp_nonrisk = mutrate_temp[!is.element(mutrate_temp$genename, gene_prior[gene_prior$risk_indicator == 1,1]),]
head(mutrate_temp_risk)
summary(coverage$annotation1)
0.1*0
0.1*50
exp(5)
exp(0.001*50)
exp(0.01*50)
exp(0.05*50)
exp(0.02*50)
exp(0.03*50)
exp(0.03*1)
test = matrix(seq(1,12,1),3,4)
test
a = 0
a = a+c(1,2,3)
a
epi_effect_size = c(log(3),log(2),log(1))
anno_effect_size = c(0.03)
addition_par_rr = c(epi_effect_size, anno_effect_size)
addition_par_rr
head(mutrate_temp_risk)
test
test*addition_par_rr
test%*%addition_par_rr
test%*%c(2,2,1,1)
test
head(mutrate_temp_risk[12:(12+num_addition_par)])
head(mutrate_temp_risk[12:(12+num_addition_par-1)])
active_effect = mutrate_temp_risk[12:(12+num_addition_par-1)]%*%addition_par_rr
active_effect = as.matrix(mutrate_temp_risk[12:(12+num_addition_par-1)])%*%addition_par_rr
head(as.matrix(mutrate_temp_risk[12:(12+num_addition_par-1)]))
head(active_effect)
mutrate_temp_risk = data.frame(mutrate_temp_risk, mutrate2 = mutrate_temp_risk$adjusted_mutrate*exp((mutrate_temp$promoter + mutrate_temp$nf)*active_effect))
length(active_effect)
dim(mutrate_temp_risk)
mutrate_temp_risk = data.frame(mutrate_temp_risk, mutrate2 = mutrate_temp_risk$adjusted_mutrate*exp((mutrate_temp_risk$promoter + mutrate_temp_risk$nf)*active_effect))
head(mutrate_temp_risk)
exp(0.8)
head(mutrate_temp_risk[mutrate_temp_risk$site_index == "promoter1",])
head(mutrate_temp_risk[mutrate_temp_risk$site_index == "promoter100",])
tail(mutrate_temp_risk)
mutrate_temp_nonrisk = data.frame(mutrate_temp_nonrisk, mutrate2 = mutrate_temp_nonrisk$adjusted_mutrate)
mutrate_temp = rbind(mutrate_temp_risk,mutrate_temp_nonrisk)
optimization_prop = 0.05
genes_for_optimization = gene_prior[order(gene_prior[,2],decreasing = FALSE),1]
genes_for_optimization = genes_for_optimization[1:floor(length(genes_for_optimization)*optimization_prop)]
mutrate_temp = mutrate_temp[is.element(mutrate_temp$genename, genes_for_optimization),]
head(mutrate_temp)
head(mutrate_temp)
mutrate_temp = data.frame(mutrate_temp, sim_mut_count = mapply(function(x){rpois(1,x)}, mutrate_temp$mutrate2))
head(mutrate_temp)
sum(mutrate_temp$sim_mut_count)
active_effect = as.matrix(mutrate_temp_risk[,12:(12+num_addition_par-1)])%*%addition_par_rr
head(active_effect)
head(mutrate_temp_risk[,12:(12+num_addition_par-1)])
head(mutrate_temp_risk[12:(12+num_addition_par-1)])
?optim
fr<-function(x){ # the function that will be optimized later for promoter_beta, enhancer_beta
# the order of relative risk in x is epigenomic_relative_risk followed by anno_relative_risk
all_rr = x
logP_Zg1 = by(mutrate_temp, mutrate_temp[,"genename"],
function(x) sum(x$sim_mut_count*(log(x$adjusted_mutrate)+(x$promoter+x$nf)(as.matrix(x[,12:(12+num_addition_par-1)])%*%all_rr))-x$adjusted_mutrate*exp((x$promoter+x$nf)(as.matrix(x[,12:(12+num_addition_par-1)])%*%all_rr))-log(factorial(x$sim_mut_count))))
logP_Zg0 = by(mutrate_temp, mutrate_temp[,"genename"],
function(x) sum(x$sim_mut_count*log(x$adjusted_mutrate)-x$adjusted_mutrate-log(factorial(x$sim_mut_count))))
gene_prob_table = data.frame(genename = names(logP_Zg1), Zg1 = as.vector(logP_Zg1), Zg0 = as.vector(logP_Zg0))
gene_prior = read.delim(gene_prior_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
gene_prior = data.frame(genename = gene_prior[,1], prob = 1-gene_prior[,2])
gene_mle_table = merge(gene_prob_table, gene_prior, by.x = "genename", by.y = "genename")
sum(log((gene_mle_table$prob*exp(gene_mle_table$Zg1)+(1-gene_mle_table$prob)*exp(gene_mle_table$Zg0)))) # minimization
}
mle = optim(c(0.1,0.1,0.1,0.1), fr, control=list("fnscale"=-1), hessian = TRUE)
x = c(0.5,0.2,0.1,0.03)
all_rr = x
logP_Zg1 = by(mutrate_temp, mutrate_temp[,"genename"],
function(x) sum(x$sim_mut_count*(log(x$adjusted_mutrate)+(x$promoter+x$nf)(as.matrix(x[,12:(12+num_addition_par-1)])%*%all_rr))-x$adjusted_mutrate*exp((x$promoter+x$nf)(as.matrix(x[,12:(12+num_addition_par-1)])%*%all_rr))-log(factorial(x$sim_mut_count))))
head(mmutrate_temp)
head(mutrate_temp)
x = mutrate_temp[mutrate_temp$genename == "ANO5",]
(log(x$adjusted_mutrate)+(x$promoter+x$nf)(as.matrix(x[,12:(12+num_addition_par-1)])%*%all_rr)
)
as.matrix(x[,12:(12+num_addition_par-1)])%*%all_rr
(x$promoter+x$nf)
(x$promoter+x$nf)*(as.matrix(x[,12:(12+num_addition_par-1)])%*%all_rr)
fr<-function(x){ # the function that will be optimized later for promoter_beta, enhancer_beta
# the order of relative risk in x is epigenomic_relative_risk followed by anno_relative_risk
all_rr = x
logP_Zg1 = by(mutrate_temp, mutrate_temp[,"genename"],
function(x) sum(x$sim_mut_count*(log(x$adjusted_mutrate)+(x$promoter+x$nf)*(as.matrix(x[,12:(12+num_addition_par-1)])%*%all_rr))-x$adjusted_mutrate*exp((x$promoter+x$nf)*(as.matrix(x[,12:(12+num_addition_par-1)])%*%all_rr))-log(factorial(x$sim_mut_count))))
logP_Zg0 = by(mutrate_temp, mutrate_temp[,"genename"],
function(x) sum(x$sim_mut_count*log(x$adjusted_mutrate)-x$adjusted_mutrate-log(factorial(x$sim_mut_count))))
gene_prob_table = data.frame(genename = names(logP_Zg1), Zg1 = as.vector(logP_Zg1), Zg0 = as.vector(logP_Zg0))
gene_prior = read.delim(gene_prior_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
gene_prior = data.frame(genename = gene_prior[,1], prob = 1-gene_prior[,2])
gene_mle_table = merge(gene_prob_table, gene_prior, by.x = "genename", by.y = "genename")
sum(log((gene_mle_table$prob*exp(gene_mle_table$Zg1)+(1-gene_mle_table$prob)*exp(gene_mle_table$Zg0)))) # minimization
}
mle = optim(c(0.1,0.1,0.1,0.1), fr, control=list("fnscale"=-1), hessian = TRUE)
dim(temp)
infile = "/media/yuwen/Elements/ASD_temp_storage/test.fasta"
temp1 = read.delim(infile, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
temp2 = fread(infile, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
library(parallel)
library(data.table)
temp2 = fread(infile, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
a = mapply(calculate_cg,temp1[1:100,2])
calculate_cg <-function(seq){
letter = as.data.frame(strsplit(c(seq),split=""))
GC_count = length(letter[letter[,1] == "C"|letter[,1] == "c" | letter[,1] == "G" | letter[,1] == "g",1])
GC_pct = GC_count/length(letter[,1])
GC_pct
}
a = mapply(calculate_cg,temp1[1:100,2])
a
a = mapply(calculate_cg,temp2[1:100,2])
a
temp[1:100,2]
temp2[1:100,2]
as.vector(temp2[1:100,2])
a = mapply(calculate_cg,as.vector(temp2[1:100,2]))
a
a = mapply(calculate_cg,as.vector(temp1[1:100,2]))
a
node_n = 6
cl <- makeCluster(no_cores)
library(parallel)
cl <- makeCluster(no_cores)
calculate_cg <-function(seq){
letter = as.data.frame(strsplit(c(seq),split=""))
GC_count = length(letter[letter[,1] == "C"|letter[,1] == "c" | letter[,1] == "G" | letter[,1] == "g",1])
GC_pct = GC_count/length(letter[,1])
GC_pct
}
clusterExport(cl, "calculate_cg")
cl <- makeCluster(no_cores)
no_cores = 6
cl <- makeCluster(no_cores)
clusterExport(cl, "calculate_cg")
start = Sys.time()
a = parLapply(cl, temp1[1000,2], calculate_cg)
end = Sys.time()
print(end-start)
a
start = Sys.time()
a = parLapply(cl, temp1[1:1000,2], calculate_cg)
end = Sys.time()
print(end-start)
start = Sys.time()
a = parLapply(cl, temp1[1:100000,2], calculate_cg)
end = Sys.time()
print(end-start)
stopCluster()
stopCluster(cl)
no_cores = 1
cl <- makeCluster(no_cores)
clusterExport(cl, "calculate_cg")
start = Sys.time()
a = parLapply(cl, temp1[1:100000,2], calculate_cg)
end = Sys.time()
print(end-start)
stopCluster(cl)
no_cores = 6
cl <- makeCluster(no_cores)
clusterExport(cl, "calculate_cg")
start = Sys.time()
a = parLapply(cl, temp1[1:100000,2], calculate_cg)
end = Sys.time()
print(end-start)
stopCluster(cl)
?memmory.size()
?memory.size()
rm(list=ls())
load("/media/yuwen/F/ASD/160229_new_control_integrating_all_data/160229_all_data_burden_analysis_v2.Rdata")
dim(mutation)
mutation[9,]
ref_alt_allele[9,]
mutation[mutation$start == 73634377,]
mutation[mutation$start == 73634376,]
ref_alt_allele [6509,]
devtools::install_github("jdblischak/workflowr", build_vignettes = TRUE)
install.packages("knitr")
install.packages("knitr")
version()
sessionInfo()
install.packages('knitr', repos='http://cran.rstudio.org')
install.packages('knitr', repos='http://streaming.stat.iastate.edu/CRAN/src/contrib/knitr_1.4.1.tar.gz')
install.packages('knitr', repos='/home/yuwen/Downloads/knitr_1.15.1.tar.gz')
install.packages('/home/yuwen/Downloads/knitr_1.15.1.tar.gz')
install.packages("/home/yuwen/Downloads/knitr_1.15.1.tar.gz", repos = NULL, type = "source")
sessionInfo()
install.packages("/home/yuwen/Downloads/knitr_1.10.tar.gz", repos = NULL, type = "source")
install.packages("/home/yuwen/Downloads/knitr_1.14.tar.gz", repos = NULL, type = "source")
install.packages("/home/yuwen/Downloads/knitr_1.11.tar.gz", repos = NULL, type = "source")
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
hist(seq(1:10))
library(ggplot2)
ggplot(diamonds)  # if only the dataset is known.
ggplot(diamonds, aes(x=carat))  # if o
library(ggplot2)
library(ggplot)
jpeg("r3.0.2.jpeg")
hist(1:10)
dev.off()
dev.off()
dev.off()
jpeg("r3.0.2.jpeg")
hist(1:10)
dev.off()
getwd()
getwd("/media/yuwen/F")
setwd("/media/yuwen/F")
jpeg("r3.0.2.jpeg")
hist(1:10)
dev.off()
x11.options()
X11.options()
sessionInfo()
setwd("/media/yuwen/Elements/Tiao_Seq/")
library(ggplot2)
#library(gplots)
library(data.table)
source("../lib/170302_genomic_peak_processing_tools.R")
setwd("/media/yuwen/Elements/Tiao_Seq/analysis/")
library(ggplot2)
#library(gplots)
library(data.table)
source("../lib/170302_genomic_peak_processing_tools.R")
peak_list = c("../unified_data_repo/20170120_second/323A_gDNA_seal_vs_323A_gDNA_input.keep_dup_1_peaks.narrowPeak",
"../unified_data_repo/20170120_second/323T_gDNA_seal_vs_323T_gDNA_input.keep_dup_1_peaks.narrowPeak",
"../unified_data_repo/20170120_second/323T_hmc_seal_cfDNA_vs_323T_cfDNA_input.keep_dup_1_peaks.narrowPeak")
sample_name <- c("323A_gDNA_seal_dup_1",
"323T_gDNA_seal_dup_1",
"323T_hmc_seal_cfDNA_dup_1")
peak_pairwise_comparions(peak_list= peak_list, overlap = 1e-9, sample_name = sample_name)
library(gplots)
?heatmap.2
peak_list = c("../unified_data_repo/20170120_second/323A_gDNA_seal_vs_323A_gDNA_input.keep_dup_1_peaks.narrowPeak",
"../unified_data_repo/20170120_second/323T_gDNA_seal_vs_323T_gDNA_input.keep_dup_1_peaks.narrowPeak",
"../unified_data_repo/20170120_second/323T_hmc_seal_cfDNA_vs_323T_cfDNA_input.keep_dup_1_peaks.narrowPeak")
sample_name <- c("323A_gDNA_seal_dup_1",
"323T_gDNA_seal_dup_1",
"323T_hmc_seal_cfDNA_dup_1")
peak_pairwise_comparions(peak_list= peak_list, overlap = 1e-9, sample_name = sample_name)
?knitr
?jpg
?jpeg
jpeg(file = "test.jpeg")
hist(seq(1:10), lwd = 3)
dev.off()
jpeg(file = "test.jpeg")
hist(seq(1:10), lwd = 3)
dev.off()
getwd()
jpeg(file = "test.jpeg", quality = 100)
hist(seq(1:10), lwd = 3)
dev.off()
jpeg(file = "test1.jpeg", quality = 100)
hist(seq(1:10), lwd = 3)
dev.off()
jpeg(file = "test2.jpeg")
hist(seq(1:10), lwd = 3)
dev.off()
jpeg(file = "test1.jpeg", quality = 100, width = 700, height = 700)
hist(seq(1:10), lwd = 3)
dev.off()
jpeg(file = "test2.jpeg")
hist(seq(1:10), lwd = 3)
dev.off()
jpeg(file = "test1.jpeg", quality = 100, width = 700, height = 700, type = "xlib")
jpeg(file = "test1.jpeg", quality = 100, width = 700, height = 700, type = "Xlib")
dev.off()
jpeg(file = "test1.jpeg", quality = 100, width = 700, height = 700, type = "Xlib")
hist(seq(1:10), lwd = 3)
dev.off()
jpeg(file = "test2.jpeg")
hist(seq(1:10), lwd = 3)
dev.off()
jpeg(file = "test1.jpeg", quality = 100, width = 700, height = 700, type = "quartz")
hist(seq(1:10), lwd = 3)
dev.off()
jpeg(file = "test2.jpeg")
hist(seq(1:10), lwd = 3)
dev.off()
