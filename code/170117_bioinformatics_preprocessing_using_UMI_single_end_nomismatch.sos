#!/usr/bin/env sos-runner
#fileformat=SOS1.0

# This script will do some bioinformatics preprocessing for Jump-Seq data
# Example code to run
# sos run 160408_test.sos -- -j 6
# this script uses UMI information to collapse PCR duplicates, will also demultiplex data into single cells. 




from glob import glob
from subprocess import check_output


parameter: data_folder = '../data/Data/' # where the raw .gz files are in the system
parameter: file_name = str # The name of files that need to be processed. The raw fastq.gz file.
parameter: mapping_processor_num = 4 # The number of processs that will be used in mapping 


[gunzip: shared = {"gunzip_output": "output"}]
## gunzip the raw sequencing files in file_names1 (Read1)

raw_file = data_folder + file_name

input: raw_file, pattern = "{name}.fastq.gz"
output: ["${_name}.fastq"]
run:
gunzip -c ${_input} > ${_name}.fastq


[UMI_encoding]
#encode UMI information to the name of each read by umi_tools, and remove reads without Jump-Seq barcode
input: gunzip_output, pattern = "{name}.{ext}"
output: ["${_name}.umi_encoded_adaptor_removed.fastq"]
run:
/media/yuwen/F/tools/miniconda3/bin/umi_tools extract -p NNNNNNNN --quality-filter-threshold 20 --quality-encoding phred33 \
-I ${_input} -L ${_name}.UMI_extract.log -S ${_name}.umi_encoded.fastq
## discard reads without Jump-seq adaptors 
cutadapt --discard-untrimmed -g ^TGACTCG -o ${_output} \
${_name}.umi_encoded.fastq


[UMI_mapping]
#map to mouse mm9, don't allow for running multiple pairs of samples at one time, but will use 6 CPUs for one pair at one time. 
input: pattern = "{name}.umi_encoded_adaptor_removed.fastq"
output: ["${_name}.umi_encoded_adaptor_removed_no_mismatch.sorted.dedup.bam.flagstat"]
run:
bowtie -p ${mapping_processor_num} -S -m 1 -n 0 -l 35 -5 1 ../other_annotations/bowtie1_indexed_genome/mm9 ${_input} ${_name}.umi_encoded_adaptor_removed_no_mismatch.sam
samtools view -bS ${_name}.umi_encoded_adaptor_removed_no_mismatch.sam -o ${_name}.umi_encoded_adaptor_removed_no_mismatch.bam
rm ${_name}.umi_encoded_adaptor_removed_no_mismatch.sam
samtools sort ${_name}.umi_encoded_adaptor_removed_no_mismatch.bam ${_name}.umi_encoded_adaptor_removed_no_mismatch_sorted
rm ${_name}.umi_encoded_adaptor_removed_no_mismatch.bam
samtools index ${_name}.umi_encoded_adaptor_removed_no_mismatch_sorted.bam
/media/yuwen/F/tools/miniconda3/bin/umi_tools dedup -I ${_name}.umi_encoded_adaptor_removed_no_mismatch_sorted.bam \
-S ${_name}.umi_encoded_adaptor_removed_no_mismatch_sorted_dedup.bam -L ${_name}.UMI_dedup_no_mismatch.log
samtools flagstat ${_name}.umi_encoded_adaptor_removed_no_mismatch_sorted_dedup.bam > ${_output}

[test_1]
## gunzip the raw sequencing files in file_names1 (Read1)
raw_files1 = []
with open("${file_names1}") as f:
	raw_files1 = f.read().splitlines()
raw_files1 =[data_folder + x for x in raw_files1]

raw_files2 = []
with open("${file_names2}") as f:
	raw_files2 = f.read().splitlines()
raw_files2 =[data_folder + x for x in raw_files2]


input: raw_files1, pattern = '{name}.fastq.gz', paired_with=['raw_files2'], group_by='single'
output: ["${_name}_Read1.flagstat","${_name}_Read2.flagstat"]
task: concurrent = True
run:
ls ${_input} > ${_name}_Read1.fastqtest
ls ${_raw_files2} > ${_name}_Read2_fastqtest

[test_2]
input:  group_by=2, pattern="{name}.{ext}"
output: ["${_name[0]}_de.${_ext[0]}","${_name[1]}_de2.${_ext[1]}"]
run:
  echo "${_index}: ${_name[0]}, ${_name[1]}"
  echo "${_index}: ${_output[0]}, ${_output[1]}"
  touch ${_output}

[rm_empty_reads]
# works for the original version but not for the new version, which has this part integrated into another step
# to remove empty reads that are generated by cutadapt ,could consider combine this step with the last step in the future
input: group_by=2, pattern = "{name}.umi_encoded_adaptor_removed.fastq"
output: expand_pattern("{_name}.umi_encoded_adaptor_removed_empty_removed.fastq")
task: concurrent = True
run: 
cutadapt --minimum-length 1 --pair-filter=any -o ${_output[0]} -p ${_output[1]} ${_input[0]} ${_input[1]}



[default]
#sos_run('gunzip+UMI_encoding+rm_empty_reads+demultiplex')
sos_run('gunzip+UMI_encoding+UMI_mapping')
#sos_run('test')

