#!/usr/bin/env sos-runner
#fileformat=SOS1.0

# This script downsampled bam files at 10, 20, ..., to 100 percentage.

parameter: file_name = str # a bam file that needs to be processed, file name ends with .bam

[subsample]
## gunzip the raw sequencing files in file_names1 (Read1)

input: file_name, pattern = "{name}.bam"
output: ["${_name}_Read1.fastq","${_name}_Read2.fastq"]
task: concurrent = True
run:
gunzip -c ${_input} > ${_output[0]}
gunzip -c ${_raw_files2} > ${_output[1]}


[list_files]

input: group_by=2, pattern = "{name}.fastq"
output: ["${_name[0]}.listfiles", "${_name[1]}.listfiles"]
task: concurrent = True
run:
ls ${_input[0]} > ${_output[0]}
ls ${_input[1]} > ${_output[1]}


[UMI_encoding]
#encode UMI information to the name of each read by umi_tools, and remove reads without Jump-Seq barcode
input: group_by=2, pattern = "{name}.{ext}"
output: ["${_name[0]}.umi_encoded.fastq","${_name[1]}.umi_encoded.fastq"]
task: concurrent = True
run:
/media/yuwen/F/tools/miniconda3/bin/umi_tools extract -p NNNNNNNN --quality-filter-threshold 20 --quality-encoding phred33 \
-I ${_input[0]} -L ${_name}.UMI_extract.log -S ${_output[0]} --read2-in ${_input[1]} --read2-out ${_output[1]}


[Post_UMI_processing]
# remove adaptors 
input: group_by=2, pattern = "{name}.umi_encoded.fastq"
output: ["${_name[0]}_jump_${Jump_barcode}.umi_encoded_adaptor_removed_empty_removed.fastq", "${_name[1]}_jump_${Jump_barcode}.umi_encoded_adaptor_removed_empty_removed.fastq"]
run:
## discard reads without Jump-seq adaptors 
cutadapt --discard-untrimmed -g ^${Jump_barcode} -o ${_name[0]}_jump_${Jump_barcode}.umi_encoded.fastq.temp.fastq -p ${_name[1]}_jump_${Jump_barcode}.umi_encoded.fastq.temp.fastq ${_input[0]} ${_input[1]}

## get the lines/reads number of Read1 that have a Jump Barcode
wc -l ${_name[0]}_jump_${Jump_barcode}.umi_encoded.fastq.temp.fastq > ${_name[0]}_jump_${Jump_barcode}.umi_encoded.fastq.temp.fastq.linenum


## trim reads at the 3'ends to remove sequences from universal adaptors, also remove empty reads
# -a is the plus strand downstream of the genomic DNA insert (From Read1)
# -A is the reverse compelmentary strand of the genomic DNA insert (From Read2)
cutadapt --minimum-length 1 --pair-filter=any -a CTGTCTCTTATACACATCTNNNNNNNNAGATCGGAAGAGCACACGTCTGAACTCCAGTCAC -A ${Jump_barcode_RC}NNNNNNNNAGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT \
-o ${_output[0]} -p ${_output[1]} ${_name[0]}_jump_${Jump_barcode}.umi_encoded.fastq.temp.fastq ${_name[1]}_jump_${Jump_barcode}.umi_encoded.fastq.temp.fastq

rm ${_name[0]}_jump_${Jump_barcode}.umi_encoded.fastq.temp.fastq
rm ${_name[1]}_jump_${Jump_barcode}.umi_encoded.fastq.temp.fastq

wc -l ${_output[0]} > ${_output[0]}.linenum

[demultiplex]
# use cell-specific indexes to demultiplex
input: group_by=2, pattern = "{name}_Read{read_number}_jump_${Jump_barcode}.umi_encoded_adaptor_removed_empty_removed.fastq"
output:  ["${_name[0]}_jump_${Jump_barcode}.umi_encoded_adaptor_removed_barcode_TP%02d_%s.fastq" % (y, z) for y in range(1,11) for z in range(1,3)]
run:
/media/yuwen/F/tools/flexbar-2.7.0/flexbar -r ${_input[1]} \
-p ${_input[0]} -b ${single_cell_barcode} \
--barcode-trim-end LEFT_TAIL --max-uncalled 2 -t ${_name[0]}_jump_${Jump_barcode}.umi_encoded_adaptor_removed -n 5



[UMI_mapping]
#map to {mapping_reference}, don't allow for running multiple pairs of samples at one time, but will use 6 CPUs for one pair at one time. 
input: group_by =2, pattern = "{prefix}.umi_encoded_adaptor_removed_barcode_{barcode}_{read_number}.fastq"
output: ["${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_sorted_dedup_${_barcode[0]}.bam.flagstat"]
task: concurrent = True
run:
bowtie -p 1 -S -m 1 -n 0 -l 35 -5 1 ../other_annotations/bowtie1_indexed_genome/mm9 -1 ${_input[1]} -2 ${_input[0]} ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_${_barcode[0]}.sam
samtools view -bS ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_${_barcode[0]}.sam -o ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_${_barcode[0]}.bam
rm ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_${_barcode[0]}.sam
samtools sort ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_${_barcode[0]}.bam ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_sorted_${_barcode[0]}
rm ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_${_barcode[0]}.bam
samtools index ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_sorted_${_barcode[0]}.bam
/media/yuwen/F/tools/miniconda3/bin/umi_tools dedup -I ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_sorted_${_barcode[0]}.bam \
-S ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_sorted_dedup_${_barcode[0]}.bam -L ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_sorted_dedup_${_barcode[0]}.log
samtools flagstat ${_prefix[0]}.umi_encoded_adaptor_removed_no_mismatch_sorted_dedup_${_barcode[0]}.bam > ${_output}

