#!/usr/bin/env sos-runner
#fileformat=SOS1.0

# This script will do some bioinformatics preprocessing for Jump-Seq data
# Example code to run
# sos run 160408_test.sos -- -j 6
# this script uses UMI information to collapse PCR duplicates, will also demultiplex data into single cells. 
# The cell-specific index is located at the first 27 bases of the second read



from glob import glob
from subprocess import check_output

[parameters]
data_folder = '../data/Data/' # where the raw .gz files are in the system
file_names1 = str # a list of files that need to be processed (Read1), files must end with fasta.gz
file_names2 = str # a list of files that need to be processed (Read2), the order of files in file_names1 and file_names2 should be consistent




[gunzip]
## gunzip the raw sequencing files in file_names1 (Read1)
raw_files1 = []
with open('${file_names1}') as f:
	raw_files1 = f.read().splitlines()
raw_files1 =[data_folder + x for x in raw_files1]

raw_files2 = []
with open('${file_names2}') as f:
	raw_files2 = f.read().splitlines()
raw_files2 =[data_folder + x for x in raw_files2]


input: raw_files1, pattern = '{name}.fastq.gz', paired_with=['raw_files2'], group_by='single'
output: pattern = ['{_name}_Read1.fastq','{_name}_Read2.fastq']
run:	concurrent = True
gunzip -c ${_input} > ${_name}_Read1.fastq
gunzip -c ${_raw_files2} > ${_name}_Read2.fastq

[UMI_encoding]
#encode UMI information to the name of each read by umi_tools, and remove reads without Jump-Seq barcode
input: group_by=2, pattern = "{name}.{ext}"
output: expand_pattern("{_name}.umi_encoded_adaptor_removed.fastq")
run:	concurrent = True
/media/yuwen/F/tools/miniconda3/bin/umi_tools extract -p NNNNNNNN --quality-filter-threshold 20 --quality-encoding phred33 \
-I ${_input[0]} -L ${_name}.UMI_extract.log -S ${_name[0]}.umi_encoded.fastq \
--read2-in ${_input[1]} --read2-out ${_name[1]}.umi_encoded.fastq

## discard reads without Jump-seq adaptors 
cutadapt --discard-untrimmed -g ^TGACTCG -o ${_name[0]}.umi_encoded.fastq.temp.fastq -p ${_name[1]}.umi_encoded.fastq.temp.fastq \
${_name[0]}.umi_encoded.fastq ${_name[1]}.umi_encoded.fastq

rm ${_name[0]}.umi_encoded.fastq
rm ${_name[1]}.umi_encoded.fastq

## trim reads at the 3'ends to remove sequences from universal adaptors
cutadapt -a CTGTCTCTTATACACATCTNNNNNNNNCCGAGCCCACGAGACATCTCGTATGCCGTCTTCTGCTTG -A CGAGTCANNNNNNNNCTGTCTCTTATACACATCTGACGCTGCCGACGANNNNNNNNGTGTAGATCTCGGTGGTCGCCGTATCATT \
-o ${_output[0]} -p ${_output[1]} ${_name[0]}.umi_encoded.fastq.temp.fastq ${_name[1]}.umi_encoded.fastq.temp.fastq

rm ${_name[0]}.umi_encoded.fastq.temp.fastq
rm ${_name[1]}.umi_encoded.fastq.temp.fastq

[rm_empty_reads]
# to remove empty reads that are generated by cutadapt ,could consider combine this step with the last step in the future
input: group_by=2, pattern = "{name}.umi_encoded_adaptor_removed.fastq"
output: expand_pattern("{_name}.umi_encoded_adaptor_removed_empty_removed.fastq")
run: 	concurrent = True
cutadapt --minimum-length 1 --pair-filter=any -o ${_output[0]} -p ${_output[1]} ${_input[0]} ${_input[1]}


[demultiplex]
# use cell-specific indexes to demultiplex
input: group_by=2, pattern = "{name}_Read{read_number}.umi_encoded_adaptor_removed_empty_removed.fastq"
output: ["	${_name[0]}_umi_encoded_adaptor_removed_barcode_A01_1.fastq",
"${_name[0]}_umi_encoded_adaptor_removed_barcode_A01_2.fastq"
]
run:
/media/yuwen/F/tools/flexbar-2.7.0/flexbar -r ${_name[1]}_Read${_read_number[1]}.umi_encoded_adaptor_removed_empty_removed.fastq \
-p ${_name[0]}_Read${_read_number[0]}.umi_encoded_adaptor_removed_empty_removed.fastq -b ../other_annotations/161207_single_cell_index_raw.fasta \
--barcode-trim-end LEFT_TAIL --max-uncalled 2 -t ${_name[0]}_umi_encoded_adaptor_removed -n 5


[UMI_mapping]
#map to mouse mm9, don't allow for running multiple pairs of samples at one time, but will use 6 CPUs for one pair at one time. 
rawfiles = sorted(glob('${data_folder}/*_umi_encoded_adaptor_removed_barcode_*.fastq'))
input: rawfiles, group_by =2, pattern = "{prefix}_umi_encoded_adaptor_removed_barcode_{index}_{read_number}.fastq"
output: "161215_test.flgastat"
run: concurrent=True
bowtie -p 1 -S -m 1 -n 0 -l 35 -5 1 ../other_annotations/bowtie1_indexed_genome/mm9 -1 ${_input[1]} -2 ${_input[0]} ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_${_index[0]}.sam
samtools view -bS ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_${_index[0]}.sam -o ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_${_index[0]}.bam
rm ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_${_index[0]}.sam
samtools sort ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_${_index[0]}.bam ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_sorted_${_index[0]}
rm ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_${_index[0]}.bam
samtools index ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_sorted_${_index[0]}.bam
/media/yuwen/F/tools/miniconda3/bin/umi_tools dedup -I ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_sorted_${_index[0]}.bam \
-S ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_sorted_dedup_${_index[0]}.bam -L ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_sorted_dedup_${_index[0]}.log
samtools flagstat ${_prefix[0]}_umi_encoded_adaptor_removed_no_mismatch_sorted_dedup_${_index[0]}.bam > ${_output}

[test_1]
## gunzip the raw sequencing files in file_names1 (Read1)
raw_files1 = []
with open('${file_names1}') as f:
	raw_files1 = f.read().splitlines()
raw_files1 =[data_folder + x for x in raw_files1]

raw_files2 = []
with open('${file_names2}') as f:
	raw_files2 = f.read().splitlines()
raw_files2 =[data_folder + x for x in raw_files2]


input: raw_files1, pattern = '{name}.fastq.gz', paired_with=['raw_files2'], group_by='single'
output: pattern = ['{_name}_Read1.fastq','{_name}_Read2.fastq']
run:	concurrent = True
ls ${_input} > ${_name}_Read1.fastqtest
ls ${_raw_files2} > ${_name}_Read2_fastqtest

[test_2]
input:  group_by=2, pattern="{name}.{ext}"
output: ["${_name[0]}_de.${_ext[0]}","${_name[1]}_de2.${_ext[1]}"]
run:
  echo "${_index}: ${_name[0]}, ${_name[1]}"
  echo "${_index}: ${_output[0]}, ${_output[1]}"
  touch ${_output}


[default]
sos_run('gunzip+UMI_encoding+rm_empty_reads+demultiplex')
#sos_run('test')

